type ide = string;;
(*exp esteso con Estr, Dictionary , Get , Agg , Rem , Clear , ApplyOver*)
type exp = Estr of string | Eint of int | Ebool of bool | Den of ide | Prod of exp * exp | Sum of exp * exp | Diff of exp * exp |
	Eq of exp * exp | Minus of exp | IsZero of exp | Or of exp * exp | And of exp * exp | Not of exp |
	Ifthenelse of exp * exp * exp | Let of ide * exp * exp | Fun of ide * exp | FunCall of exp * exp |
	Letrec of ide * exp * exp | Dictionary of (ide * exp)list | Get of exp * ide | Agg of exp * ide * exp | Rem of exp * ide | Clear of exp |
	ApplyOver of exp * exp ;;

(*ambiente polimorfo*)
type 't env = ide -> 't;;
let emptyenv (v : 't) = function x -> v;;
let applyenv (r : 't env) (i : ide) = r i;;
let bind (r : 't env) (i : ide) (v : 't) = function x -> if x = i then v else applyenv r x;;

(*tipi esprimibili estesi con DictionaryVal*)
type evT = Str of string | Int of int | Bool of bool | Unbound | FunVal of evFun | RecFunVal of ide * evFun | DictionaryVal of ( ide * evT)list 
and evFun = ide * exp * evT env

(*rts*)
(*type checking estesto con il controllo sul tipo string *)
let typecheck (s : string) (v : evT) : bool = match s with
	"int" -> (match v with
		Int(_) -> true |
		_ -> false) |
	"bool" -> (match v with
		Bool(_) -> true |
		_ -> false) |
	"string" -> (match v with
		  Str(_) -> true |
		_->  false) |
	_ -> failwith("not a valid type") ;;
	

(*funzioni primitive*)
let prod x y = if (typecheck "int" x) && (typecheck "int" y)
	then (match (x,y) with
		(Int(n),Int(u)) -> Int(n*u))
	else failwith("Type error");;
let sum x y = if (typecheck "int" x) && (typecheck "int" y)
	then (match (x,y) with
		(Int(n),Int(u)) -> Int(n+u))
	else failwith("Type error");;

let diff x y = if (typecheck "int" x) && (typecheck "int" y)
	then (match (x,y) with
		(Int(n),Int(u)) -> Int(n-u))
	else failwith("Type error");;

let eq x y = if (typecheck "int" x) && (typecheck "int" y)
	then (match (x,y) with
		(Int(n),Int(u)) -> Bool(n=u))
	else failwith("Type error");;

let minus x = if (typecheck "int" x) 
	then (match x with
	   	Int(n) -> Int(-n))
	else failwith("Type error");;

let iszero x = if (typecheck "int" x)
	then (match x with
		Int(n) -> Bool(n=0))
	else failwith("Type error");;

let vel x y = if (typecheck "bool" x) && (typecheck "bool" y)
	then (match (x,y) with
		(Bool(b),Bool(e)) -> (Bool(b||e)))
	else failwith("Type error");;

let et x y = if (typecheck "bool" x) && (typecheck "bool" y)
	then (match (x,y) with
		(Bool(b),Bool(e)) -> Bool(b&&e))
	else failwith("Type error");;

let non x = if (typecheck "bool" x)
	then (match x with
		Bool(true) -> Bool(false) |
		Bool(false) -> Bool(true))
	else failwith("Type error");;

(* funzione ausiliaria che restituisce il valore associato alla chiave cercata *)
let rec lookup(lst : (ide * evT)list ) (id1 : ide) : evT = match lst with
							[] -> Unbound |
							(id2 , v) ::rest -> if (id2 = id1) then v else (lookup rest  id1 ) ;;
(* funzione ausiliaria che elimina la coppia costituita  dalla chiave cercata e il suo valore *)
let rec remove(lst : (ide * evT)list ) (id : ide) : (ide * evT)list = (match lst with
									[] -> [] |
									(id1 , v):: rest -> if (id1 = id) then rest
													  else (id1 , v)::remove rest id );;


								
(*interprete*)
let rec eval (e : exp) (r : evT env) : evT = match e with
	Eint n -> Int n |
	Ebool b -> Bool b |
	IsZero a -> iszero (eval a r) |
	Estr i -> Str i |
	Den i -> applyenv r i |
	Eq(a, b) -> eq (eval a r) (eval b r) |
	Prod(a, b) -> prod (eval a r) (eval b r) |
	Sum(a, b) -> sum (eval a r) (eval b r) |
	Diff(a, b) -> diff (eval a r) (eval b r) |
	Minus a -> minus (eval a r) |
	And(a, b) -> et (eval a r) (eval b r) |
	Or(a, b) -> vel (eval a r) (eval b r) |
	Not a -> non (eval a r) |
	Ifthenelse(a, b, c) -> 
		let g = (eval a r) in
			if (typecheck "bool" g) 
				then (if g = Bool(true) then (eval b r) else (eval c r))
				else failwith ("nonboolean guard") |
	Let(i, e1, e2) -> eval e2 (bind r i (eval e1 r)) |
	Fun(i, a) -> FunVal(i, a, r) |
	FunCall(f, eArg) -> 
		let fClosure = (eval f r) in
			(match fClosure with
				FunVal(arg, fBody, fDecEnv) -> 
					eval fBody (bind fDecEnv arg (eval eArg r)) |
				RecFunVal(g, (arg, fBody, fDecEnv)) -> 
					let aVal = (eval eArg r) in
						let rEnv = (bind fDecEnv g fClosure) in
							let aEnv = (bind rEnv arg aVal) in
								eval fBody aEnv |
				_ -> failwith("non functional value")) |
        Letrec(f, funDef, letBody) ->
        		(match funDef with
            		Fun(i, fBody) -> let r1 = (bind r f (RecFunVal(f, (i, fBody, r)))) in
                         			                eval letBody r1 |
            		_ -> failwith("non functional def")) |
	
	Dictionary(lst) ->(*funzione ausiliaria che esegue eval su tutti gli exp della lista*) 
			  let rec evalList(lst : (ide * exp)list ) : (ide * evT)list =
									 match lst with
									  [] -> [] |
									  (id , e1) ::rest -> (id , eval e1 r) :: evalList(rest) in 				   DictionaryVal(evalList(lst)) |  
	
	Get(e1,id) ->  (match eval e1 r with
				DictionaryVal(lst)-> lookup lst id |
				_ -> failwith(" isn't a Dictionary ")) |

	Agg(e1,id,v)->(match eval e1 r with
				DictionaryVal(lst)->DictionaryVal((id, eval v r)::lst) |
				_-> failwith("isn't a Dictionary")) |

	Rem(e1,id)->(match eval e1 r with
				DictionaryVal(lst)->DictionaryVal(remove lst id ) |
				_-> failwith("isn't a Dictionary") )|
	
	Clear(e1) -> (match eval e1 r with
		      		DictionaryVal(lst)->DictionaryVal([]) |
				_-> failwith("isn't a Dictionary") )|

	ApplyOver(f,dic) -> (* funzione ausiliaria che applica una funzione ad un valore *)
			    let  applyFun(f:  exp) (eArg : evT) : evT =
						let fClosure = eval f r in 
							(match fClosure with 
								FunVal(arg, fBody, fDecEnv) -> eval fBody (bind fDecEnv arg  eArg ) |
								RecFunVal(g, (arg, fBody, fDecEnv)) -> let rEnv = (bind fDecEnv g fClosure) in
														let aEnv = (bind rEnv arg eArg) in
																eval fBody aEnv |
								_ -> failwith("non functional value"))	in
					
			    (*funzione ausiliaria che utilizza applyFun su ogni valore della lista non string *)
			    let rec applyList(f: exp ) (lst : (ide * evT)list) : (ide * evT)list = 
						         match lst with 
							     [] -> [] |
							     (id , e1)::rest -> if (typecheck "int" e1)then (id, applyFun f e1 ):: applyList f rest 
												       else (id, e1):: applyList f rest 
		       	    in match  eval dic r  with
					     DictionaryVal(lst)->DictionaryVal( applyList  f lst) |
					     _-> failwith("isn't a Dictionay");;
		
(* =============================  TESTS  ================= *)

(* basico: no let *)
let env0 = emptyenv Unbound;;

let e1 = FunCall(Fun("y", Sum(Den "y", Eint 1)), Eint 3);;

eval e1 env0;;

let e2 = FunCall(Let("x", Eint 2, Fun("y", Sum(Den "y", Den "x"))), Eint 3);;

eval e2 env0;;

let my_dict = Dictionary([]);;

eval my_dict env0;;

let my_dict = Dictionary([("name",Estr "giovanni");("matr",Eint 123456)]);;

eval my_dict env0;;

let e3 = Get(my_dict,"name");;

eval e3 env0;;

let my_dict1 = Agg(my_dict,"eta'",Eint 22);;

eval my_dict1 env0;;

let my_dict2 = Rem(my_dict1,"matr");;

eval my_dict2 env0;;

let my_dict3 = Clear(my_dict2);;

eval my_dict3 env0;;

let my_dict4 = ApplyOver(Fun("x",Sum(Den "x",Eint 1)),my_dict1);;

eval my_dict4 env0;;


